"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { X, Send, User } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import Image from "next/image"
import { asset } from "../lib/utils"

interface Message {
  id: string
  text: string
  isBot: boolean
  timestamp: Date
}

const predefinedResponses = {
  –ø—Ä–∏–≤–µ—Ç:
    "–ú—è—É! üê± –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Stepan Ivanov AI Studio. –ü–æ–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
  —É—Å–ª—É–≥–∏:
    "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º:\n‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å AI –≤ Cursor\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (—Ç–µ–∫—Å—Ç—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∞—É–¥–∏–æ)\n‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ AI\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
  —Ü–µ–Ω—ã: "–£ –Ω–∞—Å –µ—Å—Ç—å 3 —Ç–∞—Ä–∏—Ñ–∞:\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: –æ—Ç ‚ÇΩ12,000/–º–µ—Å\n‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç: –æ—Ç ‚ÇΩ65,000/–º–µ—Å\n‚Ä¢ –ü—Ä–µ–º–∏—É–º: –æ—Ç ‚ÇΩ160,000/–º–µ—Å\n\n–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ?",
  –∫–æ–Ω—Ç–∞–∫—Ç—ã:
    "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π:\n‚Ä¢ Email: stepan@ai-studio.ru\n‚Ä¢ Telegram: @stepan_ai\n‚Ä¢ –ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç–µ",
  cursor:
    "Cursor - —ç—Ç–æ AI-—Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —è –∏—Å–ø–æ–ª—å–∑—É—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –° –µ–≥–æ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ 5-10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ –æ–±—ã—á–Ω–æ–≥–æ.",
  claude:
    "Claude –æ—Ç Anthropic - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É—é Claude Opus –∏ Sonnet –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
  –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:
    "–ü–æ–º–æ–≥–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å:\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫—É –∑–∞—è–≤–æ–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤\n‚Ä¢ –†–∞–±–æ—Ç—É —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö",
  –∫–æ—Ç: "–ú—è—É! üê± –î–∞, —ç—Ç–æ –º–æ–π —Ö–æ–∑—è–∏–Ω Stepan! –Ø –ø–æ–º–æ–≥–∞—é –µ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å AI-—Ä–µ—à–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—é—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ —Å—Ç—É–¥–∏–∏.",
  default:
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ª—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, —Ü–µ–Ω–∞—Ö –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö. –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
}

export function AIChatAssistant() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: "–ú—è—É! üê± –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Stepan Ivanov AI Studio. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, —Ü–µ–Ω–∞—Ö –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö!",
      isBot: true,
      timestamp: new Date(),
    },
  ])
  const [inputValue, setInputValue] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const getBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase()

    for (const [key, response] of Object.entries(predefinedResponses)) {
      if (key !== "default" && message.includes(key)) {
        return response
      }
    }

    return predefinedResponses.default
  }

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      isBot: false,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputValue("")
    setIsTyping(true)

    // Simulate typing delay
    setTimeout(
      () => {
        const botResponse: Message = {
          id: (Date.now() + 1).toString(),
          text: getBotResponse(inputValue),
          isBot: true,
          timestamp: new Date(),
        }

        setMessages((prev) => [...prev, botResponse])
        setIsTyping(false)
      },
      1000 + Math.random() * 1000,
    )
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleSendMessage()
    }
  }

  return (
    <>
      {/* Custom CSS for meditative glow animation */}
      <style jsx>{`
        @keyframes meditative-glow {
          0%, 100% { 
            opacity: 0.7;
            box-shadow: 0 0 20px hsl(var(--primary) / 0.3), 0 0 40px hsl(var(--primary) / 0.1);
            transform: scale(1);
          }
          50% { 
            opacity: 1;
            box-shadow: 0 0 30px hsl(var(--primary) / 0.5), 0 0 60px hsl(var(--primary) / 0.2);
            transform: scale(1.02);
          }
        }
        
        .animate-meditative-glow {
          animation: meditative-glow 3s ease-in-out infinite;
        }
      `}</style>

      {/* Chat Button */}
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setIsOpen(!isOpen)}
          className={`w-14 h-14 rounded-full shadow-lg transition-all duration-300 overflow-hidden p-0 ${
            isOpen ? "bg-red-500 hover:bg-red-600" : "bg-primary hover:bg-primary/90 animate-meditative-glow"
          }`}
        >
          {isOpen ? (
            <X className="w-6 h-6 text-white" />
          ) : (
            <Image
              src={asset('/images/stepan-avatar.jpg')}
              alt="Stepan AI Assistant"
              width={56}
              height={56}
              className="w-full h-full object-cover rounded-full"
              style={{
                objectPosition: "center 30%", // –§–æ–∫—É—Å –Ω–∞ –º–æ—Ä–¥–µ –∫–æ—Ç–∞
                transform: "scale(1.3)", // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
              }}
            />
          )}
        </Button>
      </div>

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-24 right-6 w-80 h-96 bg-background border border-border rounded-lg shadow-2xl z-50 flex flex-col overflow-hidden glass-card">
          {/* Header */}
          <div className="bg-primary p-4 text-primary-foreground">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 rounded-full overflow-hidden flex items-center justify-center border-2 border-primary-foreground/20">
                <Image
                  src={asset('/images/stepan-avatar.jpg')}
                  alt="Stepan AI Assistant"
                  width={32}
                  height={32}
                  className="w-full h-full object-cover"
                  style={{
                    objectPosition: "center 30%",
                    transform: "scale(1.3)",
                  }}
                />
              </div>
              <div>
                <h3 className="font-semibold">AI Assistant üê±</h3>
                <p className="text-xs opacity-90">Stepan Ivanov AI Studio</p>
              </div>
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.isBot ? "justify-start" : "justify-end"}`}>
                <div
                  className={`max-w-[80%] p-3 rounded-lg ${
                    message.isBot ? "bg-muted text-foreground" : "bg-primary text-primary-foreground"
                  }`}
                >
                  <div className="flex items-start gap-2">
                    {message.isBot && (
                      <Image
                        src={asset('/images/stepan-avatar.jpg')}
                        alt="AI Assistant"
                        width={16}
                        height={16}
                        className="w-4 h-4 mt-0.5 flex-shrink-0 rounded-full object-cover"
                        style={{
                          objectPosition: "center 30%",
                          transform: "scale(1.4)",
                        }}
                      />
                    )}
                    {!message.isBot && <User className="w-4 h-4 mt-0.5 flex-shrink-0" />}
                    <div className="text-sm whitespace-pre-line">{message.text}</div>
                  </div>
                </div>
              </div>
            ))}

            {/* Typing indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-muted p-3 rounded-lg">
                  <div className="flex items-center gap-2">
                    <Image
                      src={asset('/images/stepan-avatar.jpg')}
                      alt="AI Assistant"
                      width={16}
                      height={16}
                      className="w-4 h-4 rounded-full object-cover"
                      style={{
                        objectPosition: "center 30%",
                        transform: "scale(1.4)",
                      }}
                    />
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"></div>
                      <div
                        className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"
                        style={{ animationDelay: "0.1s" }}
                      ></div>
                      <div
                        className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"
                        style={{ animationDelay: "0.2s" }}
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t border-border">
            <div className="flex gap-2">
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                className="flex-1"
                disabled={isTyping}
              />
              <Button
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || isTyping}
                size="icon"
                className="bg-primary hover:bg-primary/90"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
            <p className="text-xs text-muted-foreground mt-2 text-center">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å: "—É—Å–ª—É–≥–∏", "—Ü–µ–Ω—ã", "cursor", "–∫–æ—Ç" üê±
            </p>
          </div>
        </div>
      )}
    </>
  )
}
